---
title: "Joins"
format: html
editor: visual
---

## Need for Joins

```{r}
dbListFields(con,"LABEVENTS")

labs <- dbReadTable(con, "LABEVENTS")
```

## Set up need for joins

```{r}
lab_items <- dbReadTable(con, "D_LABITEMS")
```

Question: What is the most commonly ordered lab?


```{r}
# Without Joins

labs |> 
  count(itemid, sort = TRUE)

```

```{r}
top_lab <- labs |> 
  count(itemid, sort = TRUE) |>
  slice_max(n) |> 
  pull(itemid) # Too esoteric?
```

```{r}
lab_items |>
  filter(itemid == top_lab)
```

But what if you wanted to do all the labs.....

## Joins

Imagine you're the director of a pathology residency program, and you're setting up a new mentorship initiative. The goal is simple: pair senior residents with junior residents to provide guidance and support. To start, you create two lists. The first list contains the names of junior residents in need of mentorship. The second list is made up of senior residents who have volunteered to be mentors.

Now, the challenge is to effectively pair these two groups. To do this, you decide to use a straightforward method: number both lists starting from 1. Each junior resident with a number (say, 3) will be paired with the senior resident who also has the same number (3 in this case).

The process of matching the pairs of residents is a real-life "join". But there are different flavors of joins, and depending on the number of residents in each list and how you want the mentorship  program to work you'll use a different matching process, or join. 

### Left Joins

Let's say you have 3 junior residents and 5 senior resident volunteers. Your lists may look something like this:

<div style="display: flex; justify-content: space-between;">
<div>

**Junior Residents**

| Number | Name             |
|--------|------------------|
| 1      | Alex Johnson     |
| 2      | Jamie Smith      |
| 3      | Taylor Brown     |
| 4      | Jordan Garcia    |
| 5      | Morgan Robinson  |

</div>
<div>

**Senior Residents**

| Number | Name             |
|--------|------------------|
| 1      | Chris Lee        |
| 2      | Jordan Patel     |
| 3      | Alex Rivera      |

</div>
</div>

(Alternatively)

```{r results='asis', echo=FALSE}
library(knitr)
library(kableExtra)

# Data for junior and senior residents
seniorResidents <- tibble(
  Number = 1:5,
  `Senior Resident` = c("Alex Johnson", "Jamie Smith", "Taylor Brown", "Jordan Garcia", "Morgan Robinson")
)
juniorResidents<- tibble(
  Number = 1:3,
  `Junior Resident` = c("Chris Lee", "Jordan Patel", "Alex Rivera")
)

# Define colors for each specific number
color_mapping <- setNames(c("#FFB6C1", "#ADD8E6", "#90EE90", "#FFD700", "#FFA07A"),
                          c(1, 2, 3, 4, 5))

# Function to apply colors to all columns
color_cells <- function(data) {
  data %>%
    rowwise() %>%
    mutate(across(everything(), ~cell_spec(., "html", background = color_mapping[as.character(Number)])))
}

# Apply colors and convert to HTML tables
juniorTable <- juniorResidents %>%
  color_cells() %>%
  kable("html", escape = F) %>%
  kable_styling(full_width = F, position = "left")

seniorTable <- seniorResidents %>%
  color_cells() %>%
  kable("html", escape = F) %>%
  kable_styling(full_width = F, position = "right")

# Output the tables
(juniorTable)
(seniorTable)
```

### Left Joins

What you want to do is make a new list that has the junior resident and their assigned senior resident. We want to (1) ensure that all the junior residents appear in the final list. Next to their name should be their assigned senior resident. (2) If there are more senior resident volunteers than junior trainees, we don't need them in the final list. 

A left join will accomplish this task. In a left join, every junior resident from our first list is included. This means all junior residents will be on the final list, with their corresponding senior residents next to them if available. If a junior resident doesn't have a matching senior (because there are fewer seniors than juniors), the senior's information will be left blank or marked as 'NA' (not available) in the combined list. This method ensures that every junior resident is accounted for (1), and no senior resident is included unless they have a junior to mentor (2), perfectly aligning with our mentorship program's objective to prioritize junior resident mentorship opportunities.

```{r}
# Perform a left join
joinedData <- left_join(juniorResidents, seniorResidents, by = "Number")

# View the result
joinedData |>
  color_cells() %>%
  kable("html", escape = F)
```






```{sql connection=con}
-- Assuming conn is your database connection
SELECT distinct field_name  
FROM poe_detail

```


```{sql connection=con}
SELECT * --distinct order_subtype  
FROM poe p 
left join poe_detail pd on pd.poe_id = p.poe_id
WHERE p.order_type like 'Lab'
LIMIT 100
```

```{sql connection=con}
SELECT * FROM your_table;
```


```{sql, connection = con,  output.var="results"}
SELECT *
FROM PROCEDURES_ICD p
JOIN CPTEVENTS c ON p.subject_id = c.subject_id AND p.hadm_id = c.hadm_id
JOIN D_ICD_PROCEDURES icd on icd.icd9_code = p.icd9_code
;


WHERE p.icd9_code IN ('<icd_code_for_lab_order1>', '<icd_code_for_lab_order2>')
   OR c.cpt_number IN ('<cpt_code_for_lab_order1>', '<cpt_code_for_lab_order2>')
ORDER BY p.subject_id, p.hadm_id;

```

```{r}
results |>
  distinct(short_title) |> 
  View()
```


```{r}
labs_df |>
  count(row_id) |>
  filter(n > 1)

labs_df |>
  count(subject_id,charttime,itemid) |>
  filter(n >1)

```

```{r}
labs_df |>
  inner_join(labs_itms_df, join_by(itemid))
```

```{r}
labs_full_df <- dbGetQuery(con,"
                           SELECT * 
                           FROM LABEVENTS
                           INNER JOIN D_LABITEMS on D_LABITEMS.itemid = LABEVENTS.itemid")
                           ")
```

```{r}

```

